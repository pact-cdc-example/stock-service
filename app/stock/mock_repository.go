// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package stock is a generated GoMock package.
package stock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateStock mocks base method.
func (m *MockRepository) CreateStock(ctx context.Context, stock *Stock) (*Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStock", ctx, stock)
	ret0, _ := ret[0].(*Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStock indicates an expected call of CreateStock.
func (mr *MockRepositoryMockRecorder) CreateStock(ctx, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStock", reflect.TypeOf((*MockRepository)(nil).CreateStock), ctx, stock)
}

// GetStockByProductID mocks base method.
func (m *MockRepository) GetStockByProductID(ctx context.Context, productID string) (*Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockByProductID", ctx, productID)
	ret0, _ := ret[0].(*Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockByProductID indicates an expected call of GetStockByProductID.
func (mr *MockRepositoryMockRecorder) GetStockByProductID(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockByProductID", reflect.TypeOf((*MockRepository)(nil).GetStockByProductID), ctx, productID)
}

// UpdateStock mocks base method.
func (m *MockRepository) UpdateStock(ctx context.Context, stock *Stock) (*Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", ctx, stock)
	ret0, _ := ret[0].(*Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockRepositoryMockRecorder) UpdateStock(ctx, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockRepository)(nil).UpdateStock), ctx, stock)
}
